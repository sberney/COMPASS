<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
                    xmlns:Converters ="clr-namespace:COMPASS.Tools.Converters"
                    xmlns:Tools="clr-namespace:COMPASS.Tools"
                    xmlns:BlackPearl="clr-namespace:BlackPearl.Controls.CoreLibrary;assembly=BlackPearl.Controls.CoreLibrary"
                    xmlns:docs="clr-namespace:System.Windows.Documents;assembly=PresentationFramework">
  <ResourceDictionary.MergedDictionaries>
    <ResourceDictionary Source="Themes/DarkTheme.xaml" />
  </ResourceDictionary.MergedDictionaries>

  <!--Converters-->
  <Converters:ToVisibilityConverter x:Key="ToVisibilityConverter"/>

  <!--TextBlock Style-->
  <Style TargetType="{x:Type TextBlock}">
    <Setter Property="Foreground" Value="{StaticResource TextColor}"/>
    <Setter Property="VerticalAlignment" Value="Center"/>
    <Setter Property="FontSize" Value="16"/>
  </Style>

  <!--TextBox Style with placeholder Text-->
  <Style TargetType="{x:Type TextBox}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="TextBox">
          <Border Background="{TemplateBinding Background}" CornerRadius="4" 
                            BorderThickness="{TemplateBinding BorderThickness}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            Margin="{TemplateBinding Margin}" Padding="{TemplateBinding Padding}"
                            MinWidth="{TemplateBinding MinWidth}">
            <Grid>
              <TextBlock Text="{TemplateBinding Tools:AP.PlaceHolderText}" 
                                       VerticalAlignment="{TemplateBinding VerticalAlignment}"
                                       Foreground="{StaticResource TextMutedColor}" 
                                       Margin="{Binding Path=Margin, ElementName=PART_ContentHost}"
                                       Padding="{Binding Path=Padding, ElementName=PART_ContentHost}"
                                       FontSize="{TemplateBinding FontSize}" FontFamily="{TemplateBinding FontFamily}"
                                       Visibility="{TemplateBinding Text, Converter={StaticResource ToVisibilityConverter}, ConverterParameter=True}"/>
              <ScrollViewer Name="PART_ContentHost"/>
            </Grid>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="FontSize" Value="16"/>
    <Setter Property="CaretBrush" Value="{StaticResource TextColor}"/>
    <Setter Property="Margin" Value="5"/>
    <Setter Property="Padding" Value="5,2"/>
    <Setter Property="VerticalAlignment" Value="Center"/>
    <Setter Property="Foreground" Value="{StaticResource TextColor}"/>
    <Setter Property="Background" Value="{StaticResource DarkUIElementBackground}"/>
  </Style>

  <Style TargetType="{x:Type Hyperlink}">
    <Setter Property="Foreground" Value="{StaticResource AccentColor}"/>
  </Style>

  <Style TargetType="materialDesign:PackIcon" x:Key="ClickableIcon" BasedOn="{StaticResource {x:Type materialDesign:PackIcon}}">
    <Setter Property="Foreground" Value="{StaticResource TextMutedColor}"/>
    <Style.Triggers>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter Property="Foreground" Value="{StaticResource TextColor}"/>
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Visibility" Value="Collapsed"/>
      </Trigger>
    </Style.Triggers>
  </Style>

  <!--#region Button Styles and Templates-->
  <!--Button base-->
  <Style TargetType="{x:Type Button}" x:Key="BaseButton">
    <Setter Property="Background" Value="{StaticResource ButtonBackground}"/>
    <Setter Property="Foreground" Value="{StaticResource TextColor}"/>
    <Setter Property="BorderBrush" Value="{x:Null}"/>
    <Setter Property="Margin" Value="10,3"/>
    <Setter Property="Padding" Value="15,5"/>
    <Setter Property="VerticalAlignment" Value="Center"/>
    <Setter Property="HorizontalContentAlignment" Value="Center"/>
    <Style.Triggers>
      <Trigger Property="IsMouseOver" Value="true">
        <Setter Property="Cursor" Value="Hand"/>
      </Trigger>
    </Style.Triggers>
  </Style>

  <!--Button With Icon and text-->
  <Style TargetType="{x:Type Button}" x:Key="IconTextButton" BasedOn="{StaticResource BaseButton}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" 
                            CornerRadius="7" HorizontalAlignment="Stretch" Margin="{TemplateBinding Margin}" Padding="{TemplateBinding Padding}">
            <StackPanel Orientation="Horizontal" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalAlignment}">
              <materialDesign:PackIcon Margin="0,0,10,0"
                                            Kind="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Tools:AP.IconKind)}"/>
              <ContentPresenter VerticalAlignment="{TemplateBinding VerticalAlignment}"/>
            </StackPanel>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!-- Button Text Only-->
  <Style TargetType="{x:Type Button}" x:Key="TextButton" BasedOn="{StaticResource BaseButton}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" 
                            CornerRadius="7" HorizontalAlignment="Stretch" Margin="{TemplateBinding Margin}" Padding="{TemplateBinding Padding}">
            <ContentPresenter Content="{TemplateBinding Content}" VerticalAlignment="{TemplateBinding VerticalAlignment}"/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style TargetType="{x:Type Button}" x:Key="IconBtn" BasedOn="{StaticResource BaseButton}">
    <Setter Property="BorderBrush" Value="{x:Null}"/>
    <Setter Property="Background" Value="{StaticResource SelectableTransparent}"/>
    <Setter Property="RenderTransformOrigin" Value="0.5,0.5"/>
    <Setter Property="Margin" Value="3"/>
    <Setter Property="Padding" Value="0"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <materialDesign:PackIcon Height="{TemplateBinding Height}" Width="{TemplateBinding Width}" Style="{StaticResource ClickableIcon}"
                            Kind="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Tools:AP.IconKind)}" Background="{TemplateBinding Background}">
          </materialDesign:PackIcon>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="RenderTransform">
          <Setter.Value>
            <ScaleTransform ScaleX="1.1" ScaleY="1.1"/>
          </Setter.Value>
        </Setter>
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Visibility" Value="Collapsed"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <!--#endregion-->

  <!--#region ScrollBar Style-->
  <Style x:Key="ScrollBarLineButton" TargetType="{x:Type RepeatButton}">
    <Setter Property="Visibility" Value="Hidden"/>
    <Setter Property="SnapsToDevicePixels" Value="True"/>
    <Setter Property="OverridesDefaultStyle" Value="true"/>
  </Style>
  <Style x:Key="ScrollBarPageButton" TargetType="{x:Type RepeatButton}">
    <Setter Property="Visibility" Value="Hidden"/>
    <Setter Property="SnapsToDevicePixels" Value="True"/>
    <Setter Property="OverridesDefaultStyle" Value="true"/>
    <Setter Property="IsTabStop" Value="false"/>
    <Setter Property="Focusable" Value="false"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RepeatButton}">
          <Border Background="Black" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="ScrollBarThumb" TargetType="{x:Type Thumb}">
    <Setter Property="SnapsToDevicePixels" Value="True"/>
    <Setter Property="OverridesDefaultStyle" Value="true"/>
    <Setter Property="IsTabStop" Value="false"/>
    <Setter Property="Focusable" Value="false"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Thumb}">
          <Border CornerRadius="4" Background="{TemplateBinding Background}" 
                            BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0"  Width="8"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <ControlTemplate x:Key="VerticalScrollBar" TargetType="{x:Type ScrollBar}">
    <Grid>
      <Grid.RowDefinitions>
        <RowDefinition MaxHeight="0"/>
        <RowDefinition Height="0.00001*"/>
        <RowDefinition MaxHeight="0"/>
      </Grid.RowDefinitions>
      <Border Grid.RowSpan="3" CornerRadius="2" Background="Transparent" />
      <RepeatButton Grid.Row="0" Style="{StaticResource ScrollBarLineButton}" Height="18" Command="ScrollBar.LineUpCommand" Content="M 0 4 L 8 4 L 4 0 Z" />
      <Track Name="PART_Track" Grid.Row="1" IsDirectionReversed="true">
        <Track.DecreaseRepeatButton>
          <RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="ScrollBar.PageUpCommand" />
        </Track.DecreaseRepeatButton>
        <Track.Thumb>
          <Thumb Style="{StaticResource ScrollBarThumb}" Margin="1,0,1,0" Background="#FF686868" BorderBrush="#FF686868"/>
        </Track.Thumb>
        <Track.IncreaseRepeatButton>
          <RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="ScrollBar.PageDownCommand" />
        </Track.IncreaseRepeatButton>
      </Track>
      <RepeatButton Grid.Row="3" Style="{StaticResource ScrollBarLineButton}" Height="18" Command="ScrollBar.LineDownCommand" Content="M 0 0 L 4 4 L 8 0 Z"/>
    </Grid>
  </ControlTemplate>

  <ControlTemplate x:Key="HorizontalScrollBar" TargetType="{x:Type ScrollBar}">
    <Grid>
      <Grid.ColumnDefinitions>
        <ColumnDefinition MaxWidth="18"/>
        <ColumnDefinition Width="0.00001*"/>
        <ColumnDefinition MaxWidth="18"/>
      </Grid.ColumnDefinitions>
      <Border Grid.ColumnSpan="3" CornerRadius="2" Background="#F0F0F0"/>
      <RepeatButton Grid.Column="0"  Style="{StaticResource ScrollBarLineButton}" Width="18" Command="ScrollBar.LineLeftCommand" Content="M 4 0 L 4 8 L 0 4 Z" />
      <Track Name="PART_Track" Grid.Column="1" IsDirectionReversed="False">
        <Track.DecreaseRepeatButton>
          <RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="ScrollBar.PageLeftCommand" />
        </Track.DecreaseRepeatButton>
        <Track.Thumb>
          <Thumb Style="{StaticResource ScrollBarThumb}" Margin="0,1,0,1" Background="#888" BorderBrush="#888" />
        </Track.Thumb>
        <Track.IncreaseRepeatButton>
          <RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="ScrollBar.PageRightCommand" />
        </Track.IncreaseRepeatButton>
      </Track>
      <RepeatButton Grid.Column="3" Style="{StaticResource ScrollBarLineButton}" Width="18" Command="ScrollBar.LineRightCommand" Content="M 0 0 L 4 4 L 0 8 Z"/>
    </Grid>
  </ControlTemplate>
  <Style x:Key="{x:Type ScrollBar}" TargetType="{x:Type ScrollBar}">
    <Setter Property="SnapsToDevicePixels" Value="True"/>
    <Setter Property="OverridesDefaultStyle" Value="true"/>
    <Setter Property="Background" Value="{x:Null}"/>
    <Style.Triggers>
      <Trigger Property="Orientation" Value="Horizontal">
        <Setter Property="Width" Value="Auto"/>
        <Setter Property="Height" Value="18" />
        <Setter Property="Template" Value="{StaticResource HorizontalScrollBar}" />
      </Trigger>
      <Trigger Property="Orientation" Value="Vertical">
        <Setter Property="Width" Value="auto"/>
        <Setter Property="Height" Value="Auto" />
        <Setter Property="Template" Value="{StaticResource VerticalScrollBar}" />
      </Trigger>
    </Style.Triggers>
  </Style>

  <Style x:Key="FavsScrollViewer" TargetType="{x:Type ScrollViewer}">
    <Setter Property="OverridesDefaultStyle" Value="True"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ScrollViewer}">
          <Grid>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto"/>
              <ColumnDefinition/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition/>
              <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <ScrollContentPresenter Grid.Column="1"/>
            <ScrollBar Name="PART_VerticalScrollBar" Value="{TemplateBinding VerticalOffset}" Maximum="{TemplateBinding ScrollableHeight}" ViewportSize="{TemplateBinding ViewportHeight}" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"/>
            <ScrollBar Name="PART_HorizontalScrollBar" Orientation="Horizontal" Grid.Row="1" Grid.Column="1" Value="{TemplateBinding HorizontalOffset}" Maximum="{TemplateBinding ScrollableWidth}" ViewportSize="{TemplateBinding ViewportWidth}" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"/>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <!--#endregion-->

  <!--#region Slider-->
  <Style x:Key="SliderRepeatButtonL" TargetType="RepeatButton">
    <Setter Property="SnapsToDevicePixels" Value="true" />
    <Setter Property="OverridesDefaultStyle" Value="true" />
    <Setter Property="IsTabStop" Value="false" />
    <Setter Property="Focusable" Value="false" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="RepeatButton">
          <Border BorderThickness="0" Background="White" Height="3" CornerRadius="1,0,0,1"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="SliderRepeatButtonR" TargetType="RepeatButton">
    <Setter Property="SnapsToDevicePixels" Value="true" />
    <Setter Property="OverridesDefaultStyle" Value="true" />
    <Setter Property="IsTabStop" Value="false" />
    <Setter Property="Focusable" Value="false" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="RepeatButton">
          <Border BorderThickness="0" Background="White" Height="3" CornerRadius="0,1,1,0"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="SliderThumb" TargetType="Thumb">
    <Setter Property="SnapsToDevicePixels" Value="true" />
    <Setter Property="OverridesDefaultStyle" Value="true" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Thumb">
          <Border CornerRadius="1" Height="15" Width="4" Background="White"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <ControlTemplate x:Key="Slider"  TargetType="Slider">
    <Grid>
      <Grid.RowDefinitions>
        <RowDefinition Height="Auto" />
        <RowDefinition Height="Auto" MinHeight="{TemplateBinding MinHeight}" />
        <RowDefinition Height="Auto" />
      </Grid.RowDefinitions>
      <Track Grid.Row="1" x:Name="PART_Track"   >
        <Track.DecreaseRepeatButton>
          <RepeatButton Style="{StaticResource SliderRepeatButtonL}"  Command="Slider.DecreaseLarge" />
        </Track.DecreaseRepeatButton>
        <Track.Thumb>
          <Thumb Style="{StaticResource SliderThumb}"  />
        </Track.Thumb>
        <Track.IncreaseRepeatButton>
          <RepeatButton Style="{StaticResource SliderRepeatButtonR}" Command="Slider.IncreaseLarge" />
        </Track.IncreaseRepeatButton>
      </Track>
    </Grid>
  </ControlTemplate>
  <Style TargetType="Slider">
    <Setter Property="Focusable" Value="False"/>
    <Setter Property="SnapsToDevicePixels" Value="true" />
    <Setter Property="OverridesDefaultStyle" Value="true" />
    <Style.Triggers>
      <Trigger Property="Orientation" Value="Horizontal">
        <Setter Property="Template" Value="{StaticResource Slider}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <!--#endregion-->

  <!--#region Contextmenu-->
  <Style TargetType="ContextMenu">
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="HasDropShadow" Value="True"/>
    <Setter Property="FontSize" Value="15"/>
    <Setter Property="Foreground" Value="White"/>
    <Setter Property="Template" >
      <Setter.Value>
        <ControlTemplate TargetType="ContextMenu">
          <Border CornerRadius="5" Background="#FF3C3C3C" BorderThickness="0">
            <Border.OpacityMask>
              <VisualBrush>
                <VisualBrush.Visual>
                  <Border Background="Black" SnapsToDevicePixels="True"
                                                CornerRadius="{Binding CornerRadius, RelativeSource={RelativeSource AncestorType=Border}, FallbackValue=10}"
                                                Width="{Binding ActualWidth, RelativeSource={RelativeSource AncestorType=Border}, FallbackValue=10}"
                                                Height="{Binding ActualHeight, RelativeSource={RelativeSource AncestorType=Border}, FallbackValue=10}"/>
                </VisualBrush.Visual>
              </VisualBrush>
            </Border.OpacityMask>
            <ItemsPresenter/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="ItemsPanel">
      <Setter.Value>
        <ItemsPanelTemplate>
          <StackPanel/>
        </ItemsPanelTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style TargetType="MenuItem">
    <Setter Property="Tools:AP.IconKind" Value="None"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type MenuItem}">
          <Border Padding="15,5" Background="{TemplateBinding Background}">
            <DockPanel Background="{x:Null}">
              <materialDesign:PackIcon Kind="{TemplateBinding Tools:AP.IconKind}" 
                                                     DockPanel.Dock="Left" Margin="0,3,10,3"/>
              <ContentPresenter Content="{TemplateBinding Header}" DockPanel.Dock="Left"/>
              <!--Little submenu arrow-->
              <Polygon Points="0,0 4,4, 0,8" Stroke="{x:Null}" Fill="White" 
                                    DockPanel.Dock="Right" Margin="10,0,0,0" VerticalAlignment="Center">
                <Polygon.Style>
                  <Style TargetType="{x:Type Polygon}">
                    <Setter Property="Visibility" Value="Hidden"/>
                    <Style.Triggers>
                      <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type MenuItem}}, Path=HasItems}" Value="true">
                        <Setter Property="Visibility" Value="Visible" />
                      </DataTrigger>
                    </Style.Triggers>
                  </Style>
                </Polygon.Style>
              </Polygon>
              <!--Submenu-->
              <Popup Name="Popup" Placement="Right" HorizontalOffset="15" VerticalOffset="-15" AllowsTransparency="True"
                                   IsOpen="{TemplateBinding IsSubmenuOpen}" PopupAnimation="Fade">
                <Border Name="SubmenuBorder" SnapsToDevicePixels="True" Background="#FF3C3C3C"
                                        CornerRadius="5">
                  <Border.OpacityMask>
                    <VisualBrush>
                      <VisualBrush.Visual>
                        <Border Background="Black" SnapsToDevicePixels="True"
                                                CornerRadius="{Binding CornerRadius, RelativeSource={RelativeSource AncestorType=Border}, FallbackValue=10}"
                                                Width="{Binding ActualWidth, RelativeSource={RelativeSource AncestorType=Border}, FallbackValue=10}"
                                                Height="{Binding ActualHeight, RelativeSource={RelativeSource AncestorType=Border}, FallbackValue=10}"/>
                      </VisualBrush.Visual>
                    </VisualBrush>
                  </Border.OpacityMask>
                  <ItemsPresenter/>
                </Border>
              </Popup>
            </DockPanel>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsHighlighted" Value="True">
              <Setter Property="Background"  Value="#FF6C6C6C"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <ContextMenu x:Key="CodexContextMenu">
    <ContextMenu.Resources>
      <Converters:MultiParamConverter x:Key="MultiParamConverter"/>
    </ContextMenu.Resources>
    <MenuItem Header="Open Locally" Tools:AP.IconKind="FileOutline"
                  Command="{Binding Path=DataContext.CodexVM.OpenCodexLocallyCommand,
                            RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}"
                  CommandParameter="{Binding RelativeSource={RelativeSource Self}, Path=Parent.DataContext}"/>
    <MenuItem Header="Open Online" Tools:AP.IconKind="Web"
                  Command="{Binding Path=DataContext.CodexVM.OpenCodexOnlineCommand,
                            RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}"
                  CommandParameter="{Binding RelativeSource={RelativeSource Self}, Path=Parent.DataContext}"/>
    <MenuItem Header="Edit" Tools:AP.IconKind="Edit"
                  Command="{Binding Path=DataContext.CodexVM.EditCodexCommand,
                            RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}"
                  CommandParameter="{Binding RelativeSource={RelativeSource Self}, Path=Parent.DataContext}"/>
    <MenuItem Header="Favorite" Tools:AP.IconKind="Favorite"
                  Command="{Binding Path=DataContext.CodexVM.FavoriteCodexCommand,
                            RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}"
                  CommandParameter="{Binding RelativeSource={RelativeSource Self}, Path=Parent.DataContext}">
      <MenuItem.Style>
        <Style TargetType="MenuItem">
          <Setter Property="Template">
            <Setter.Value>
              <ControlTemplate TargetType="{x:Type MenuItem}">
                <Border Padding="15,5" Background="{TemplateBinding Background}">
                  <DockPanel Background="{x:Null}">
                    <materialDesign:PackIcon Kind="{TemplateBinding Tools:AP.IconKind}"
                                                     DockPanel.Dock="Left" Margin="0,3,10,3">
                      <materialDesign:PackIcon.Style>
                        <Style TargetType="materialDesign:PackIcon">
                          <Style.Triggers>
                            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=Parent.DataContext.Favorite}" Value="True">
                              <Setter Property="Foreground" Value="IndianRed"/>
                            </DataTrigger>
                          </Style.Triggers>
                        </Style>
                      </materialDesign:PackIcon.Style>
                    </materialDesign:PackIcon>
                    <ContentPresenter Content="{TemplateBinding Header}" DockPanel.Dock="Left"/>
                  </DockPanel>
                </Border>
                <ControlTemplate.Triggers>
                  <Trigger Property="IsHighlighted" Value="True">
                    <Setter Property="Background"  Value="#FF6C6C6C"/>
                  </Trigger>
                </ControlTemplate.Triggers>
              </ControlTemplate>
            </Setter.Value>
          </Setter>
        </Style>
      </MenuItem.Style>
    </MenuItem>
    <MenuItem Header="Show in Explorer" Tools:AP.IconKind="FolderEyeOutline"
                  Command="{Binding Path=DataContext.CodexVM.ShowInExplorerCommand, 
                            RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}"
                  CommandParameter="{Binding RelativeSource={RelativeSource Self}, Path=Parent.DataContext}"/>
    <MenuItem Header="Move to Collection" Tools:AP.IconKind="FolderMoveOutline"
                  ItemsSource="{Binding Path=DataContext.MVM.CollectionDirectories,
                                RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}">
      <MenuItem.ItemContainerStyle>
        <Style TargetType="MenuItem" BasedOn="{StaticResource {x:Type MenuItem}}">
          <Setter Property="MenuItem.Command" Value="{Binding Path=DataContext.CodexVM.MoveToCollectionCommand,
                                RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}"/>
          <Setter Property="DataContext" Value="{Binding Parent.DataContext}"/>
          <Setter Property="MenuItem.CommandParameter">
            <Setter.Value>
              <MultiBinding Converter="{StaticResource MultiParamConverter}">
                <Binding Path="Header" RelativeSource="{RelativeSource self}"/>
                <Binding Path="Parent.DataContext" RelativeSource="{RelativeSource AncestorType=MenuItem, AncestorLevel=1}"/>
              </MultiBinding>
            </Setter.Value>
          </Setter>
        </Style>
      </MenuItem.ItemContainerStyle>
    </MenuItem>
    <MenuItem Header="Delete" Tools:AP.IconKind="Delete"
                  Command="{Binding Path=DataContext.CodexVM.DeleteCodexCommand,
                            RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}"
                  CommandParameter="{Binding RelativeSource={RelativeSource Self}, Path=Parent.DataContext}"/>
  </ContextMenu>

  <!--#endregion-->

  <Style x:Key="{x:Type ToolTip}" TargetType="ToolTip">
    <Setter Property="OverridesDefaultStyle" Value="true" />
    <Setter Property="HasDropShadow" Value="True" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ToolTip">
          <Border Name="Border" BorderThickness="1" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" 
                            Background="{StaticResource ButtonBackground}" BorderBrush="{StaticResource TabFocus}">
            <ContentPresenter Margin="4" HorizontalAlignment="Left" VerticalAlignment="Top" />
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="HasDropShadow" Value="true">
              <Setter TargetName="Border" Property="CornerRadius" Value="4" />
              <Setter TargetName="Border" Property="SnapsToDevicePixels" Value="true" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>


  <!--#region Combobox Style-->
  <ControlTemplate x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
    <Grid>
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="*"/>
        <ColumnDefinition Width="25" />
      </Grid.ColumnDefinitions>
      <Border Grid.Column="0" Background="Transparent" BorderThickness="2,2,0,2" BorderBrush="{StaticResource UIElementBackground}" />
      <Border Grid.Column="1" Background="{StaticResource UIElementBackground}" CornerRadius="0,3,3,0">
        <Path x:Name="Arrow" Fill="{StaticResource CollectionIconFill}" HorizontalAlignment="Center"
                                     VerticalAlignment="Center" Data="M0,0 L6,8 L12,0 "/>
      </Border>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="ToggleButton.IsMouseOver" Value="true">
        <Setter TargetName="Arrow" Property="RenderTransformOrigin" Value="0.5, 0.5"/>
        <Setter TargetName="Arrow" Property="RenderTransform">
          <Setter.Value>
            <TransformGroup>
              <ScaleTransform ScaleY="1.2" ScaleX="1.2"/>
            </TransformGroup>
          </Setter.Value>
        </Setter>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>

  <ControlTemplate x:Key="ComboBoxTextBox" TargetType="{x:Type TextBox}">
    <Border x:Name="PART_ContentHost" Focusable="True" Background="{TemplateBinding Background}" />
  </ControlTemplate>

  <Style x:Key="{x:Type ComboBox}" TargetType="{x:Type ComboBox}">
    <Setter Property="SnapsToDevicePixels" Value="true"/>
    <Setter Property="OverridesDefaultStyle" Value="true"/>
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
    <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
    <Setter Property="MinWidth" Value="120"/>
    <Setter Property="MinHeight" Value="20"/>
    <Setter Property="Foreground" Value="White"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ComboBox}">
          <Grid>
            <ToggleButton Name="ToggleButton" Template="{StaticResource ComboBoxToggleButton}" Grid.Column="2" 
                            Focusable="false" IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}"
                            ClickMode="Press">
            </ToggleButton>
            <ContentPresenter Name="ContentSite" IsHitTestVisible="False"  Content="{TemplateBinding SelectionBoxItem}"
                            ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                            ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                            Margin="5,5,30,5" VerticalAlignment="Center" HorizontalAlignment="Left" />
            <TextBox x:Name="PART_EditableTextBox" Style="{x:Null}" Template="{StaticResource ComboBoxTextBox}" 
                            HorizontalAlignment="Left" VerticalAlignment="Center" Margin="5" Focusable="True" 
                            Background="{StaticResource SelectableTransparent}" Foreground="{StaticResource TextColor}"
                            Visibility="Hidden" IsReadOnly="{TemplateBinding IsReadOnly}"/>
            <Popup Name="Popup" Placement="Bottom" IsOpen="{TemplateBinding IsDropDownOpen}"
                            AllowsTransparency="True" Focusable="False" PopupAnimation="Slide">
              <Grid Name="DropDown" SnapsToDevicePixels="True"                
                              MinWidth="{TemplateBinding ActualWidth}" MaxHeight="{TemplateBinding MaxDropDownHeight}">
                <Border x:Name="DropDownBorder" Background="#FF3F3F3F" BorderThickness="1" BorderBrush="{StaticResource UIElementBackground}"/>
                <ScrollViewer Margin="4,6,4,6" SnapsToDevicePixels="True">
                  <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                </ScrollViewer>
              </Grid>
            </Popup>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="HasItems" Value="false">
              <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95"/>
            </Trigger>
            <Trigger Property="IsGrouping" Value="true">
              <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
            </Trigger>
            <Trigger Property="IsEditable"  Value="true">
              <Setter Property="IsTabStop" Value="false"/>
              <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible"/>
              <Setter TargetName="ContentSite" Property="Visibility" Value="Hidden"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>


  <ControlTemplate TargetType="BlackPearl:MultiSelectCombobox" x:Key="Default">
    <Grid>
      <ToggleButton Name="ToggleButton" Template="{StaticResource ComboBoxToggleButton}" Grid.Column="3" 
                Focusable="false" IsChecked="{Binding Path=IsOpen,Mode=TwoWay,ElementName=popup}"
                ClickMode="Press">
      </ToggleButton>
      <!--Rich TextBox bound to document-->
      <RichTextBox x:Name="rtxt" IsDocumentEnabled="False" AcceptsReturn="False" VerticalContentAlignment="Center"
                        FontSize="16" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="5,5,30,5" Focusable="True" 
                        Background="{StaticResource SelectableTransparent}" Foreground="{StaticResource TextColor}"
                            BorderThickness="0"/>
      <!--Suggestion Drop-Down -->
      <Popup Name="popup" Placement="Bottom"
                    IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                    StaysOpen="False" PopupAnimation="Slide" SnapsToDevicePixels="True"
                    Width="{Binding ActualWidth, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Grid}}">
        <Border BorderBrush="Black" BorderThickness="1">
          <ScrollViewer MaxHeight="300" HorizontalScrollBarVisibility="Disabled"
                        VerticalScrollBarVisibility="Auto">
            <ListBox Name="lstSuggestion" Background="{StaticResource DarkUIElementBackground}"
                                SelectionMode="Multiple" HorizontalContentAlignment="Stretch"
                                DisplayMemberPath="{Binding DisplayMemberPath, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}">
              <ListBox.ItemsSource>
                <CompositeCollection>
                  <CollectionContainer Collection="{Binding SuggestionItemsSource, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                </CompositeCollection>
              </ListBox.ItemsSource>
            </ListBox>
          </ScrollViewer>
        </Border>
      </Popup>
    </Grid>
  </ControlTemplate>


  <!--SimpleStyles: ComboBoxItem-->
  <Style x:Key="{x:Type ComboBoxItem}" TargetType="{x:Type ComboBoxItem}">
    <Setter Property="SnapsToDevicePixels" Value="true"/>
    <Setter Property="Foreground" Value="White"/>
    <Setter Property="OverridesDefaultStyle" Value="true"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ComboBoxItem}">
          <Border Name="Border" Padding="2" SnapsToDevicePixels="true">
            <ContentPresenter />
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsHighlighted" Value="true">
              <Setter TargetName="Border" Property="Background" Value="#FF4F4F4F"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <!--#endregion-->

  <!--#region Checkbox style-->
  <Style TargetType="{x:Type CheckBox}">
    <Setter Property="Cursor" Value="Hand"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type CheckBox}">
          <Border>
            <Border.Background>
              <SolidColorBrush Color="Black" Opacity="0"/>
            </Border.Background>
            <StackPanel Orientation="Horizontal">
              <materialDesign:PackIcon x:Name="checkboxIcon" Kind="CheckboxBlankOutline"/>
              <ContentPresenter/>
            </StackPanel>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="True">
              <Setter TargetName="checkboxIcon" Property="Kind" Value="CheckboxMarkedOutline"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <!--#endregion-->

  <!--#region Dropdown Menu -->
  <Style TargetType="ContextMenu" x:Key="DropdownMenu">
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="HasDropShadow" Value="True"/>
    <Setter Property="FontSize" Value="15"/>
    <Setter Property="Foreground" Value="White"/>
    <Setter Property="Template" >
      <Setter.Value>
        <ControlTemplate TargetType="ContextMenu">
          <StackPanel>
            <!--<Polygon Points="0,5 5,0, 10,5" Stroke="#FF3C3C3C" Fill="#FF3C3C3C" HorizontalAlignment="Right" Margin="20,0"/>-->
            <Border CornerRadius="5" Background="#FF3C3C3C" BorderThickness="0">
              <Border.OpacityMask>
                <VisualBrush>
                  <VisualBrush.Visual>
                    <Border Background="Black" SnapsToDevicePixels="True"
                                                CornerRadius="{Binding CornerRadius, RelativeSource={RelativeSource AncestorType=Border}, FallbackValue=10}"
                                                Width="{Binding ActualWidth, RelativeSource={RelativeSource AncestorType=Border}, FallbackValue=10}"
                                                Height="{Binding ActualHeight, RelativeSource={RelativeSource AncestorType=Border}, FallbackValue=10}"/>
                  </VisualBrush.Visual>
                </VisualBrush>
              </Border.OpacityMask>
              <ItemsPresenter/>
            </Border>
          </StackPanel>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style TargetType="MenuItem" x:Key="DropdownMenuItem">
    <Setter Property="Header" Value="{Binding Header}"/>
    <Setter Property="Command" Value="{Binding Command}"/>
    <Setter Property="CommandParameter" Value="{Binding CommandParam}"/>
    <Setter Property="ItemsSource" Value="{Binding Submenus}"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type MenuItem}">
          <Border Padding="5" Background="{TemplateBinding Background}">
            <DockPanel Background="{x:Null}">
              <Slider DockPanel.Dock="Bottom" Value="{Binding Prop, Mode=TwoWay}" Minimum="50" Interval="1" Maximum="400" IsSnapToTickEnabled="True">
                <Slider.Style>
                  <Style TargetType="Slider" BasedOn="{StaticResource {x:Type Slider}}">
                    <Setter Property="Visibility">
                      <Setter.Value>
                        <Binding Path="Prop" ConverterParameter="Number" FallbackValue="Collapsed" TargetNullValue="Collapsed"
                                                         Mode="OneWay">
                          <Binding.Converter>
                            <Converters:ViewOptionPropTypetoVisibilityConverter/>
                          </Binding.Converter>
                        </Binding>
                      </Setter.Value>
                    </Setter>
                  </Style>
                </Slider.Style>
              </Slider>
              <CheckBox IsChecked="{Binding Prop, Mode=TwoWay}" Margin="3,0">
                <CheckBox.Style>
                  <Style TargetType="{x:Type CheckBox}" BasedOn="{StaticResource {x:Type CheckBox}}">
                    <Setter Property="Visibility">
                      <Setter.Value>
                        <Binding Path="Prop" ConverterParameter="Boolean" FallbackValue="Collapsed" TargetNullValue="Collapsed"
                                                         Mode="OneWay">
                          <Binding.Converter>
                            <Converters:ViewOptionPropTypetoVisibilityConverter/>
                          </Binding.Converter>
                        </Binding>
                      </Setter.Value>
                    </Setter>
                  </Style>
                </CheckBox.Style>
              </CheckBox>
              <ContentPresenter Content="{TemplateBinding Header}" DockPanel.Dock="Left"/>

              <!--Little submenu arrow-->
              <Polygon Points="0,0 4,4, 0,8" Stroke="#FF222222" Fill="#FF222222" 
                                    DockPanel.Dock="Right"  Margin="10,0" VerticalAlignment="Center">
                <Polygon.Style>
                  <Style TargetType="{x:Type Polygon}">
                    <Setter Property="Visibility" Value="Hidden"/>
                    <Style.Triggers>
                      <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type MenuItem}}, Path=HasItems}" Value="true">
                        <Setter Property="Visibility" Value="Visible" />
                      </DataTrigger>
                    </Style.Triggers>
                  </Style>
                </Polygon.Style>
              </Polygon>
              <!--Submenu-->
              <Popup Name="Popup" Placement="Right" HorizontalOffset="-4" AllowsTransparency="True"
                                   IsOpen="{TemplateBinding IsSubmenuOpen}" PopupAnimation="Fade">
                <Border Name="SubmenuBorder" SnapsToDevicePixels="True" Background="#FF3C3C3C"
                                        CornerRadius="5">
                  <ItemsPresenter/>
                </Border>
              </Popup>
            </DockPanel>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsHighlighted" Value="True">
              <Setter Property="Background"  Value="#FF6C6C6C"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <!--#endregion-->

  <!--#region DatePicker-->
  <Style x:Key="CalendarItemStyle" TargetType="{x:Type CalendarItem}">
    <Setter Property="Margin" Value="0,3,0,3" />
  </Style>

  <Style x:Key="DarkCalenderStyle" TargetType="{x:Type Calendar}">
    <Setter Property="CalendarItemStyle"
          Value="{StaticResource CalendarItemStyle}" />
    <Setter Property="Foreground" Value="{StaticResource TextColor}" />
    <Setter Property="Background" Value="{StaticResource ButtonBackground}"/>
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Calendar}">
          <StackPanel x:Name="PART_Root"
                    HorizontalAlignment="Center">
            <CalendarItem x:Name="PART_CalendarItem"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        Background="{TemplateBinding Background}"
                        Style="{TemplateBinding CalendarItemStyle}" />
          </StackPanel>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style TargetType="{x:Type DatePicker}">
    <Setter Property="CalendarStyle" Value="{StaticResource DarkCalenderStyle}"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type DatePicker}">
          <Border Background="Gray" CornerRadius="5" Margin="5">
            <Grid x:Name="PART_Root">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
              </Grid.ColumnDefinitions>
              <DatePickerTextBox x:Name="PART_TextBox" MinWidth="100"
                                       BorderThickness="0" Foreground="White"
                                       HorizontalContentAlignment="Stretch"
                                       VerticalContentAlignment="Center"
                                       Grid.Column="0" Margin="5,0"/>
              <Button x:Name="PART_Button" Grid.Column="1">
                <Button.Style>
                  <Style TargetType="{x:Type Button}">
                    <Setter Property="Template">
                      <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                          <Border HorizontalAlignment="Right" Margin="3">
                            <Border.Background>
                              <SolidColorBrush Color="Black" Opacity="0"/>
                            </Border.Background>
                            <materialDesign:PackIcon Width="20" Kind="Calendar"/>
                          </Border>
                        </ControlTemplate>
                      </Setter.Value>
                    </Setter>
                  </Style>
                </Button.Style>
              </Button>
              <Popup x:Name="PART_Popup" StaysOpen="False"/>
            </Grid>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="FirstDayOfWeek" Value="Monday"/>
  </Style>

  <Style TargetType="{x:Type DatePickerTextBox}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="DatePickerTextBox">
          <Grid>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup Name="WatermarkStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition GeneratedDuration="0" />
                </VisualStateGroup.Transitions>
                <VisualState Name="Unwatermarked" />
                <VisualState Name="Watermarked">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="PART_Watermark" Storyboard.TargetProperty="Opacity" To="1" Duration="0" />
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>

            <Grid x:Name="WatermarkContent">
              <Border x:Name="watermark_decorator" BorderThickness="0">
                <ContentControl x:Name="PART_Watermark" Foreground="White"
                                                    Opacity="0" Focusable="False"
                                                    IsHitTestVisible="False" Margin="0">
                  <ContentControl.Template>
                    <ControlTemplate>
                      <TextBlock Text="DD/MM/YYYY" VerticalAlignment="Center"/>
                    </ControlTemplate>
                  </ContentControl.Template>
                </ContentControl>
              </Border>
              <ScrollViewer x:Name="PART_ContentHost"/>
            </Grid>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!--#endregion-->

  <!--#region Tags Style-->
  <DataTemplate x:Key="TagTemplate">
    <Border CornerRadius="5" Margin="2,3">
      <Border.Background>
        <SolidColorBrush Color="{Binding BackgroundColor}" Opacity=".8"/>
      </Border.Background>
      <TextBlock Text="{Binding Content}" Margin="7,2" Foreground="White" FontSize="14"/>
    </Border>
  </DataTemplate>

  <DataTemplate x:Key="TagDeletableTemplate">
    <Border CornerRadius="5" Margin="2,3">
      <Border.Background>
        <SolidColorBrush Color="{Binding BackgroundColor}"/>
      </Border.Background>
      <StackPanel Orientation="Horizontal" Margin="7,2">
        <TextBlock x:Name="DeletableTagTextBlock" Text="{Binding Content}" Foreground="White" FontSize="14" Margin="2,0">
          <TextBlock.Style>
            <Style TargetType="TextBlock">
              <Style.Triggers>
                <DataTrigger Binding="{Binding IsMouseOver, RelativeSource={RelativeSource AncestorType=Border}}" Value="True">
                  <Setter Property="TextDecorations" Value="Strikethrough"/>
                </DataTrigger>
              </Style.Triggers>
            </Style>
          </TextBlock.Style>
        </TextBlock>
        <materialDesign:PackIcon Kind="Trash" Width="14" Height="14" VerticalAlignment="Bottom" Margin="0,1"/>
      </StackPanel>
    </Border>
  </DataTemplate>

  <DataTemplate x:Key="TagInTreeTemplate">
    <Border CornerRadius="5" Margin="0,3">
      <Border.Background>
        <SolidColorBrush Color="{Binding Tag.BackgroundColor}"/>
      </Border.Background>
      <TextBlock Text="{Binding Tag.Content}" Margin="7,0" Foreground="White" FontSize="15"/>
    </Border>
  </DataTemplate>
  <!--#endregion-->

  <Style TargetType="materialDesign:PackIcon">
    <Setter Property="VerticalAlignment" Value="Center"/>
    <Setter Property="Foreground" Value="{StaticResource TextColor}"/>
    <Setter Property="Background" Value="{StaticResource SelectableTransparent}"/>
    <Setter Property="Width" Value="20"/>
    <Setter Property="Height" Value="20"/>
  </Style>

  <!--#region Progressbar-->
  <Style x:Key="RoundedProgressBar" TargetType="{x:Type ProgressBar}">
    <Setter Property="BorderThickness" Value="0"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ProgressBar}">
          <Grid x:Name="TemplateRoot">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Determinate"/>
                <VisualState x:Name="Indeterminate">
                  <Storyboard RepeatBehavior="Forever">
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="Animation">
                      <EasingDoubleKeyFrame KeyTime="0" Value="0.25"/>
                      <EasingDoubleKeyFrame KeyTime="0:0:1" Value="0.25"/>
                      <EasingDoubleKeyFrame KeyTime="0:0:2" Value="0.25"/>
                    </DoubleAnimationUsingKeyFrames>
                    <PointAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransformOrigin)" Storyboard.TargetName="Animation">
                      <EasingPointKeyFrame KeyTime="0" Value="-0.5,0.5"/>
                      <EasingPointKeyFrame KeyTime="0:0:1" Value="0.5,0.5"/>
                      <EasingPointKeyFrame KeyTime="0:0:2" Value="1.5,0.5"/>
                    </PointAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="6"/>
            <Rectangle x:Name="PART_Track"/>
            <Grid x:Name="PART_Indicator" ClipToBounds="true" HorizontalAlignment="Left">
              <Rectangle x:Name="Indicator" Fill="{TemplateBinding Foreground}" RadiusX="6" RadiusY="6" />
              <Rectangle x:Name="Animation" Fill="{TemplateBinding Foreground}" RenderTransformOrigin="0.5,0.5" RadiusX="6" RadiusY="6">
                <Rectangle.RenderTransform>
                  <TransformGroup>
                    <ScaleTransform/>
                    <SkewTransform/>
                    <RotateTransform/>
                    <TranslateTransform/>
                  </TransformGroup>
                </Rectangle.RenderTransform>
              </Rectangle>
            </Grid>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="Orientation" Value="Vertical">
              <Setter Property="LayoutTransform" TargetName="TemplateRoot">
                <Setter.Value>
                  <RotateTransform Angle="-90"/>
                </Setter.Value>
              </Setter>
            </Trigger>
            <Trigger Property="IsIndeterminate" Value="true">
              <Setter Property="Visibility" TargetName="Indicator" Value="Collapsed"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <!--#endregion-->

  <!--#region TabControl-->
  <Style TargetType="TabItem">
    <Setter Property="Foreground" Value="{StaticResource TextColor}"/>
    <Setter Property="BorderThickness" Value="0"/>
    <Setter Property="VerticalAlignment" Value="Bottom"/>
    <Setter Property="MaxWidth" Value="300"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="TabItem">
          <Border x:Name="TabBorder">
            <StackPanel Orientation="Horizontal" Margin="5,2">
              <materialDesign:PackIcon Height="25" Width="25" HorizontalAlignment="Right"
                                                Kind="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Tools:AP.IconKind)}"/>
              <ContentPresenter 
                                                VerticalAlignment="Center"
                                                ContentSource="Header"
                                                Margin="5,0,10,0"/>
            </StackPanel>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsSelected" Value="True">
              <Setter TargetName="TabBorder" Property="Background" Value="{x:Null}"/>
            </Trigger>
            <Trigger Property="IsSelected" Value="False">
              <Setter TargetName="TabBorder" Property="Background" Value="{StaticResource UIElementBackground}"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <!--#endregion-->
</ResourceDictionary>